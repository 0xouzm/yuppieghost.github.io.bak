<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title>课堂笔记</title>
      <url>/python/2018/06/08/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
      <content type="text">2018-06-08

进程

  fork 返回值
父进程返回子进程的pid号,子进程中返回值为0
互相不等待,多进程中,每个进程中所有数据（包括全局变量）都各有拥有⼀份，互不影响

</content>
      <categories>
        
          <category> python </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>fluent python笔记</title>
      <url>/python/2018/06/07/fluntpython-note/</url>
      <content type="text">第一章 数据类型



1.bool(x) 的背后是调用x.bool() 的结果；如果不存在 bool 方法，那么 bool(x) 会尝试调用 x.len()。若返回 0，则 bool 会返回 False；否则返回True。

bool&amp;gt; bool&amp;gt;len

2.自 Python 2.6 开始，namedtuple 就加入到 Python 里，用以构建只有少数属性但是没有方法的对象，比如数据库条目。

collections.namedtuple

第二章 序列数组



1.

容器序列

　　list、tuple 和 collections.deque 这些序列能存放不同类型的数据。

扁平序列

　　str、bytes、bytearray、memoryview 和 array.array，这类序列只能容纳一种类型。

容器序列存放的是它们所包含的任意类型的对象的引用，而扁平序列里存放的是值而不是引用。

可变序列（仅限数组）

　　list、bytearray、array.array、collections.deque 和memoryview。

不可变序列

　　tuple、str 和 bytes。



2.关于迭代器和生成器：


  https://segmentfault.com/a/1190000007208388


迭代器：含__next__()

可迭代：含__iter__()

生成器：yield 或 ( 推导式 )

l=[0, 1, 20, 11, 5, 22, 9]

l[2:5] = 100 ➊

&amp;gt;  Traceback (most recent call last):File &quot;&quot;, line 1,
&amp;gt;  in*TypeError:can only assign an iterable


➊如果赋值的对象是一个切片，那么赋值语句的右侧必须是个可迭代对象。即便只有单独一个值，也要把它转换成可迭代的序列。

3.初始化多维列表

错误用法

 my_list = [[]] * 3

初始化得到同一个列表的引用*3

正确用法：

 l=[[''] * 3 for i in range(3)]

总结：注意对象的引用是否变化

4.关于序列的增量赋值运算

+= 类似于 *=

程序先调用__iadd__，如果没找到，就调用__add__方法，

！可变序列+=后，变量名不会被关联到新的对象，不可变序列因为不存在增量赋值运算，调用__add__后创建新变量赋值给原不可变序列。（str 是一个例外，因为对字符串做 += 实在是太普遍了，所以 CPython 对它做了优化。为 str初始化内存的时候，程序会为它留出额外的可扩展空间，因此进行增量操作的时候，并不会涉及复制原有字符串到新位置这类操作）

栗子：





4.栗子：
 &amp;gt;&amp;gt;&amp;gt; t = (1, 2, [30, 40])

 &amp;gt;&amp;gt;&amp;gt; t[2] += [50, 60]


抛出异常同时修改t

总结：

1、不要把可变对象放在元组里面。

2、增量赋值不是一个原子操作。我们刚才也看到了，它虽然抛出了异常，但还是完成了操作。

3、查看 Python 的字节码并不难，而且它对我们了解代码背后的运行机制很有帮助。

5.创建字典的不同方式：
&amp;gt;&amp;gt;&amp;gt; a = dict(one=1, two=2, three=3)

&amp;gt;&amp;gt;&amp;gt; b = {'one': 1, 'two': 2, 'three': 3}

&amp;gt;&amp;gt;&amp;gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))

&amp;gt;&amp;gt;&amp;gt; d = dict([('two', 2), ('one', 1), ('three', 3)])

&amp;gt;&amp;gt;&amp;gt; e = dict({'three': 3, 'one': 1, 'two': 2})

&amp;gt;&amp;gt;&amp;gt; a == b == c == d == e

True



6.减少字典查询次数：
这样写
my_dict.setdefault(key, []).append(new_value)
获取单词的出现情况列表，如果单词不存在，把单词和一个空列表放进映射，然后返回这个空列表，这样就能在不进行第二次查找的情况下更新列表了。



跟这样写：
if key not in my_dict:
my_dict[key] = []
my_dict[key].append(new_value)


二者的效果是一样的，只不过后者至少要进行两次键查询——如果键不存在的话，就是三次，用 setdefault 只需要一次就可以完成整个操作。

7.defaultdict 里的 default_factory 只会在__getitem__ 里被调用，在其他的方法里完全不会发挥作用。比
如，dd 是个 defaultdict，k 是个找不到的键， dd[k] 这个表达式会调用 default_factory 创造某个默认值，而 dd.get(k) 则会返回 None。
</content>
      <categories>
        
          <category> python </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>总算弄好了</title>
      <url>/2018/06/07/day1/</url>
      <content type="text">
  我的猫在我的键盘上走了一圈…
舍不得删它

</content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> 不容易 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Next Theme Tutorial</title>
      <url>/test/2017/07/20/next-tutorial/</url>
      <content type="text">
  NexT is a high quality elegant Jekyll theme ported from Hexo Next. It is crafted from scratch, with love.




Live Preview

Screenshots


  
    Desktop

  
  
    Sidebar
  





  Sidebar (Post details page)





  Mobile




Installation

Check whether you have Ruby 2.1.0 or higher installed:

ruby --version



Install Bundler:

gem install bundler



Clone Jacman theme:

git clone https://github.com/Simpleyyt/jekyll-theme-next.git
cd jekyll-theme-next



Install Jekyll and other dependencies from the GitHub Pages gem:

bundle install



Run your Jekyll site locally:

bundle exec jekyll server



More Details：Setting up your GitHub Pages site locally with Jekyll

Features

Multiple languages support, including: English / Russian / French / German / Simplified Chinese / Traditional Chinese.

Default language is English.

language: en
# language: zh-Hans
# language: fr-FR
# language: zh-hk
# language: zh-tw
# language: ru
# language: de



Set language field as following in site _config.yml to change to Chinese.

language: zh-Hans



Comment support.

NexT has native support for DuoShuo and Disqus comment systems.

Add the following snippets to your _config.yml:

duoshuo:
  enable: true
  shortname: your-duoshuo-shortname



OR

disqus_shortname: your-disqus-shortname



Social Media

NexT can automatically add links to your Social Media accounts:

social:
  GitHub: your-github-url
  Twitter: your-twitter-url
  Weibo: your-weibo-url
  DouBan: your-douban-url
  ZhiHu: your-zhihu-url



Feed link.


  Show a feed link.


Set rss field in theme’s _config.yml, as the following value:


  rss: false will totally disable feed link.
  
    rss:   use sites’ feed link. This is the default option.

    Follow the installation instruction in the plugin’s README. After the configuration is done for this plugin, the feed link is ready too.
  
  rss: http://your-feed-url set specific feed link.


Up to 5 code highlight themes built-in.

NexT uses Tomorrow Theme with 5 themes for you to choose from.
Next use normal by default. Have a preview about normal and night:




Head over to Tomorrow Theme for more details.

Configuration

NexT comes with few configurations.


# Menu configuration.
menu:
  home: /
  archives: /archives

# Favicon
favicon: /favicon.ico

# Avatar (put the image into next/source/images/)
# can be any image format supported by web browsers (JPEG,PNG,GIF,SVG,..)
avatar: /default_avatar.png

# Code highlight theme
# available: normal | night | night eighties | night blue | night bright
highlight_theme: normal

# Fancybox for image gallery
fancybox: true

# Specify the date when the site was setup
since: 2013




Browser support


</content>
      <categories>
        
          <category> test </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
